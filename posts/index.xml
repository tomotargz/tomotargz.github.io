<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on tomotargz.log</title><link>https://tomotargz.github.io/posts/</link><description>Recent content in Posts on tomotargz.log</description><generator>Hugo -- gohugo.io</generator><language>ja-jp</language><lastBuildDate>Mon, 09 Jan 2023 17:14:24 +0900</lastBuildDate><atom:link href="https://tomotargz.github.io/posts/index.xml" rel="self" type="application/rss+xml"/><item><title>読書メモ「武器としての決断思考」</title><link>https://tomotargz.github.io/posts/%E6%AD%A6%E5%99%A8%E3%81%A8%E3%81%97%E3%81%A6%E3%81%AE%E6%B1%BA%E6%96%AD%E6%80%9D%E8%80%83/</link><pubDate>Mon, 09 Jan 2023 17:14:24 +0900</pubDate><guid>https://tomotargz.github.io/posts/%E6%AD%A6%E5%99%A8%E3%81%A8%E3%81%97%E3%81%A6%E3%81%AE%E6%B1%BA%E6%96%AD%E6%80%9D%E8%80%83/</guid><description>はじめに これは武器としての決断思考の読書メモです。本に書かれていた「現時点における最善解」を導く出すための手順をまとめています。
「現時点における最善解」を導き出すまでの手順 問題を「xxxすべきか否か」「xxxは是か非か」という二者択一にできるまで具体化・細分化する 賛成側の主張(メリット)と反対側の主張(デメリット)を整理する 双方の主張に反論を加える 反論に耐えた双方の主張を比べてどちらが正しいかを決める 1. 問題を「xxxすべきか否か」「xxxは是か非か」という二者択一にできるまで具体化・細分化する 漠然としている問題は議論のしようがないので具体化する。賛成側と反対側に分かれて議論するために、「xxxすべきか否か」「xxxは是か非か」という二者択一になるように論題を設定する。「AとBのどちらを選ぶべきか」という論題も考えられるが争点がありすぎて議論が混乱するので避けたほうが良い。
2. 賛成側の主張(メリット)と反対側の主張(デメリット)を整理する メリットとデメリットを整理する。メリットとデメリットはそれぞれ以下の3条件を満たしている必要がある。
メリットの条件 内因性(なんらかの問題があること) 重要性(その問題が深刻であること) 解決性(問題がその行動によって解決すること) デメリット 発生過程(論題の行動を取ったときに、新たな問題が発生する過程) 深刻性(その問題が深刻であること) 固有性(現状ではそのような問題が生じていないこと) 3. 双方の主張に反論を加える メリットへの反論 内因性への反論
論題の行動を取らなくても問題は解決する そもそも現状に問題はない 重要性への反論
質的に重要ではない 量的に重要ではない 解決性への反論
論題の行動を取っても別の要因が生じるため、問題は解決しない 論題の行動は原因を正しく解決しない デメリットへの反論 発生過程への反論
論題の行動だけではデメリット発生にはいたらない 論題の影響はデメリット発生にいたるには弱すぎる 深刻性への反論
質的に重要ではない 量的に重要ではない 固有性への反論
論題の行動を取っていない状況でも問題は起こっている 論題の行動を取らなくても、将来、同様の問題が起きる 4. 反論に耐えた双方の主張を比べてどちらが正しいかを決める 反論に耐え生き残ったメリットとデメリットを比べて、どちらが大きいか決める。最後の最後は主観的な判断になる。
感想 仕事で大きな決断が必要なシーンが増えてきました。何かを決断するときに使える体系的なアプローチを知ることができたのは、今後の仕事で役立ちそうです。同じ著者の「武器としての交渉思考」も読んでみたくなりました。</description></item><item><title>データ指向アプリケーションデザイン読書メモ - リレーショナル・データベースとドキュメント・データベース</title><link>https://tomotargz.github.io/posts/%E3%83%87%E3%83%BC%E3%82%BF%E6%8C%87%E5%90%91%E3%82%A2%E3%83%97%E3%83%AA%E3%82%B1%E3%83%BC%E3%82%B7%E3%83%A7%E3%83%B3%E3%83%87%E3%82%B6%E3%82%A4%E3%83%B3%E8%AA%AD%E6%9B%B8%E3%83%A1%E3%83%A2_%E3%83%AA%E3%83%AC%E3%83%BC%E3%82%B7%E3%83%A7%E3%83%8A%E3%83%AB%E3%83%87%E3%83%BC%E3%82%BF%E3%83%99%E3%83%BC%E3%82%B9%E3%81%A8%E3%83%89%E3%82%AD%E3%83%A5%E3%83%A1%E3%83%B3%E3%83%88%E3%83%87%E3%83%BC%E3%82%BF%E3%83%99%E3%83%BC%E3%82%B9/</link><pubDate>Tue, 03 Jan 2023 00:08:48 +0900</pubDate><guid>https://tomotargz.github.io/posts/%E3%83%87%E3%83%BC%E3%82%BF%E6%8C%87%E5%90%91%E3%82%A2%E3%83%97%E3%83%AA%E3%82%B1%E3%83%BC%E3%82%B7%E3%83%A7%E3%83%B3%E3%83%87%E3%82%B6%E3%82%A4%E3%83%B3%E8%AA%AD%E6%9B%B8%E3%83%A1%E3%83%A2_%E3%83%AA%E3%83%AC%E3%83%BC%E3%82%B7%E3%83%A7%E3%83%8A%E3%83%AB%E3%83%87%E3%83%BC%E3%82%BF%E3%83%99%E3%83%BC%E3%82%B9%E3%81%A8%E3%83%89%E3%82%AD%E3%83%A5%E3%83%A1%E3%83%B3%E3%83%88%E3%83%87%E3%83%BC%E3%82%BF%E3%83%99%E3%83%BC%E3%82%B9/</guid><description>&lt;p>年末年始に&lt;a href="https://www.oreilly.co.jp/books/9784873118703/">データ指向アプリケーションデザイン&lt;/a>を読み進めた。リレーショナル・データベースとドキュメント・データベースの違いについてランダムにメモ。&lt;/p></description></item><item><title>Traverseする関数の書き方</title><link>https://tomotargz.github.io/posts/traverse%E3%81%99%E3%82%8B%E9%96%A2%E6%95%B0%E3%81%AE%E6%9B%B8%E3%81%8D%E6%96%B9/</link><pubDate>Mon, 02 Jan 2023 22:57:24 +0900</pubDate><guid>https://tomotargz.github.io/posts/traverse%E3%81%99%E3%82%8B%E9%96%A2%E6%95%B0%E3%81%AE%E6%9B%B8%E3%81%8D%E6%96%B9/</guid><description>&lt;p>グラフを探索するコードを書くときに、base-caseをどこで判定すべきか迷うことがある。
例えば2分木をpre-orderで探索して各ノードが持つ値の合計を計算する関数traverseを書こうとするとき、以下3つの選択肢があるように思う。&lt;/p></description></item><item><title>連結グラフから連結性を保ったままノードを取り除く</title><link>https://tomotargz.github.io/posts/%E9%80%A3%E7%B5%90%E3%82%B0%E3%83%A9%E3%83%95%E3%81%8B%E3%82%89%E9%80%A3%E7%B5%90%E6%80%A7%E3%82%92%E4%BF%9D%E3%81%A3%E3%81%9F%E3%81%BE%E3%81%BE%E3%83%8E%E3%83%BC%E3%83%89%E3%82%92%E5%8F%96%E3%82%8A%E9%99%A4%E3%81%8F/</link><pubDate>Thu, 29 Dec 2022 00:17:36 +0900</pubDate><guid>https://tomotargz.github.io/posts/%E9%80%A3%E7%B5%90%E3%82%B0%E3%83%A9%E3%83%95%E3%81%8B%E3%82%89%E9%80%A3%E7%B5%90%E6%80%A7%E3%82%92%E4%BF%9D%E3%81%A3%E3%81%9F%E3%81%BE%E3%81%BE%E3%83%8E%E3%83%BC%E3%83%89%E3%82%92%E5%8F%96%E3%82%8A%E9%99%A4%E3%81%8F/</guid><description>&lt;p>連結グラフからノードをひとつずつ取り除くことを考える。このとき、連結性を保ったまま、ノード数が1になるまでグラフを小さくできる。&lt;/p></description></item><item><title>About this blog</title><link>https://tomotargz.github.io/posts/about-this-blog/</link><pubDate>Tue, 27 Dec 2022 23:41:52 +0900</pubDate><guid>https://tomotargz.github.io/posts/about-this-blog/</guid><description>このブログはtomotargzが学んだこと、考えたこと、感じたことを記録する場所です。</description></item></channel></rss>